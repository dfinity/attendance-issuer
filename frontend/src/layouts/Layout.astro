---
interface Props {
  title: string;
}

const { title } = Astro.props;

import Success from "../components/Success.astro";
import ToastError from "../components/ToastError.astro";
import content from "../contents/index.json";
import socialImage from "../assets/og-image.png";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <meta property="og:title" content={content.meta.title} />
    <meta property="og:description" content={content.meta.description} />
    <meta property="og:url" content={content.meta.url} />
    <meta property="og:image" content={socialImage.src} />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content={String(socialImage.width)} />
    <meta property="og:image:height" content={String(socialImage.height)} />
    <meta property="og:image:alt" content={content.meta.title} />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <!-- data-app is also used to add the canister id as data-canister-id -->
    <div data-app class="slot-wrapper">
      <slot />
    </div>
    <div id="busy" class="busy hide">
      <div class="content">
        <div class="spinner-wrapper">
          <div class="spinner"></div>
        </div>
      </div>
    </div>
    <div class="c-toasts l-container">
      <ToastError />
    </div>
    <template id="success">
      <Success />
    </template>
  </body>
</html>

<script>
  import { AuthClient } from "@dfinity/auth-client";
  import { HttpAgent } from "@dfinity/agent";
  import { initOrbiter, trackEvent as trackEventOrbit } from "@junobuild/analytics";
  import { createActor } from "../utils/actor";
  import { getEventFromParams } from "../utils/get-event-from-params";

  const SATELLITE_ID = import.meta.env.PUBLIC_JUNO_SATELLITE_ID;
  const ORBITER_ID = import.meta.env.PUBLIC_JUNO_ORBITER_ID;
  const isDev = import.meta.env.DEV;
  const skipAnalytics = isDev || SATELLITE_ID === undefined || ORBITER_ID === undefined;

  const currentEvent = getEventFromParams();
  const eventName = currentEvent?.eventName ?? "unknown";

    /**
   * Initialize Juno Analytics only for production, and only if the required environment variables are set; otherwise, ignore.
   */
   const initAnalytics = async () => {
    if (skipAnalytics) {
      return;
    }
    
    await initOrbiter({
      orbiterId: ORBITER_ID,
      satelliteId: SATELLITE_ID,
    });

    trackEvent({ name: "page_view", event: eventName });
  }

  initAnalytics();

  /**
   * Event tracking for funnel analysis:
   * 
   * We want to track the steps until the user reaches the success page.
   * This will help us get insights on how many people finish the registration process
   * and from which event they come from.
   * 
   * Funnel:
   * page_view -> login_success -> registration_success
   *                            \> registration_error
   *           \> login_error
   *           \> login_interrupted
   * 
   * Funnel metadata:
   * * event: the event that the user is coming from.
   */
  const trackEvent = ({ name, event }: { name: string, event: string }) => {
    if (skipAnalytics) {
      return;
    }
    trackEventOrbit({ name, metadata: { event } });
  };

  const AUTH_POPUP_WIDTH = 576;
  const AUTH_POPUP_HEIGHT = 625;
  // Reference Juno: https://github.com/junobuild/juno/blob/main/src/frontend/src/lib/utils/window.utils.ts#L4
  export const popupCenter = ({
    width,
    height
  }: {
    width: number;
    height: number;
  }): string | undefined => {
    if (window === null || window.top === null) {
      return undefined;
    }

    const {
      top: { innerWidth, innerHeight }
    } = window;

    const y = innerHeight / 2 + screenY - height / 2;
    const x = innerWidth / 2 + screenX - width / 2;

    return `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=no, copyhistory=no, width=${width}, height=${height}, top=${y}, left=${x}`;
  };

  const authClient = await AuthClient.create();
  const identityProvider = import.meta.env.PUBLIC_INTERNET_IDENTITY_URL;
  const host = import.meta.env.PUBLIC_HOST;
  const mainAppElement = document.querySelector("[data-app]") as HTMLElement;
  const canisterId = mainAppElement.dataset.canisterId ?? import.meta.env.PUBLIC_OWN_CANISTER_ID;
  const fetchRootKey = import.meta.env.PUBLIC_FETCH_ROOT_KEY === "true";
  
  const busyScreen = document.getElementById('busy') as HTMLDivElement;
  
  const login = () => {
    return new Promise((resolve) => {
      busyScreen.classList.remove('hide');
      
      authClient.login({
        onSuccess: async () => {
          try {
            trackEvent({ name: "login_success", event: eventName });
            const identity = authClient.getIdentity();
            const agent = new HttpAgent({ identity, host });
            const webapp = await createActor({ canisterId, agent, fetchRootKey});
            // Login button is only present if the query param with a code appears
            const registerResponse = await webapp.register_early_adopter({ event_data: [{ event_name: eventName, registration_code: currentEvent?.registrationCode ?? "" }] });
            if ("Ok" in registerResponse) {
              trackEvent({ name: "registration_success", event: eventName });
              resolve({ status: 200, message: 'Logged in successfully!' });
            } else if ("Err" in registerResponse && "Internal" in registerResponse.Err) {
              trackEvent({ name: "registration_error", event: eventName });
              resolve({ status: 400, message: registerResponse.Err.Internal });
            } else if ("Err" in registerResponse && "External" in registerResponse.Err) {
              trackEvent({ name: "registration_error", event: eventName });
              resolve({ status: 400, message: registerResponse.Err.External });
            }
          } catch (err: unknown) {
            trackEvent({ name: "registration_error", event: eventName });
            resolve({ status: 400, message: `There was an error while trying to register. ${err}` });
          } finally {
            busyScreen.classList.add('hide');
          }
        },
        onError: (err) => {
          // Show nothing if the user cancelled the flow.
          if (err !== "UserInterrupt") {
            trackEvent({ name: "login_error", event: eventName });
            showErrorToast("The sign-in process was aborted or did not succeed.");
          } else {
            trackEvent({ name: "login_interrupted", event: eventName });
          }
          busyScreen.classList.add('hide');
          resolve({ status: 400, message: err });
        },
        identityProvider,
        windowOpenerFeatures: popupCenter({ width: AUTH_POPUP_WIDTH, height: AUTH_POPUP_HEIGHT })
      })
    });
  };
  
  
  // select the templates for the different pages / states
  const $templateSuccess = document.getElementById('success') as HTMLTemplateElement;
  
  // wrap containing the app
  const $app = document.querySelector('[data-app]') as HTMLDivElement;

  const handleClick = async (e: MouseEvent) => {
    // make sure the event target is a link
    const $target = e?.target as HTMLLinkElement;
    
    if ($target.matches('[data-login]')) {
      const status = await login() as { status: number; message: string }

      if (status.status === 200) {
        $app.innerHTML = $templateSuccess.innerHTML;
        // Needed to apply custom styles to the body
        document.body.classList.add("body--success");
      }

      if (status.status === 400) {
        showErrorToast(status.message);
      }
    }
  }

  document.addEventListener('click', handleClick, {
    capture: true,
    passive: true,
  });

  const toastElement = document.getElementById("toast-error") as HTMLElement;
  const toastMessageElement = document.getElementById("toast-error-message") as HTMLElement;
  const hideErrorToast = () => {
    toastElement.classList.add("hide");
  };
  const showErrorToast = (message: string) => {
    toastMessageElement.innerHTML = message;
    toastElement.classList.remove("hide");
    setTimeout(hideErrorToast, 5000);
  };
</script>

<style is:global>
  @font-face {
    font-family: "Circular";
    src: url("/CircularXXWeb-Regular.woff2") format("woff2");
    font-style: normal;
    font-weight: normal;
    font-display: swap;
  }
  
  @font-face {
    font-family: "Circular";
    src: url("/CircularXXWeb-Medium.woff2") format("woff2");
    font-style: normal;
    font-weight: 500;
    font-display: swap;
  }
  
  @font-face {
    font-family: "Circular";
    src: url("/CircularXXWeb-Bold.woff2") format("woff2");
    font-style: normal;
    font-weight: 600;
    font-display: swap;
  }
  :root {
    /** value design tokens (to use in other vairables) */
    /** vc: value color */
    --vc-snow: #ffffff;
    --vc-raven: #202126;
    --vc-eggplant: #1c0b5a;
    --vc-grape: #542eea;
    --vc-mika: #8c45f0;
    --vc-mika-transparent: rgba(243, 245, 246, 0.2);
    --vc-rosewater: #ede8fa;
    --vc-chrome: #e5e5e5;
    --vc-light-grey: #d4d8e5;
    --vc-brand-pink--light: rgba(251, 172, 202, 1);
    --fade: #000000d9;
    
    --vg-lovepotion: linear-gradient(90deg, var(--vc-grape), var(--vc-mika));
    --vg-lovepotion--repeating: linear-gradient(90deg, var(--vc-grape), var(--vc-mika), var(--vc-grape));
    
    /** reference tokens (use these in actual CSS) */
    /** rc: reference color */
    --rc-background: var(--vc-snow);
    --rc-onBackground: var(--vc-raven);
    
    --rc-background--inverted: var(--vc-eggplant);
    --rc-onBackground--inverted: var(--vc-snow);
    
    --rc-navbar: var(--rc-background--inverted);
    --rc-onNavbar: var(--rc-onBackground--inverted);
    
    --rc-footer: var(--rc-navbar);
    --rc-onFooter: var(--rc-onNavbar);
    
    --rc-pillBackground: var(--vc-rosewater);
    --rc-onPillBackground: var(--vc-eggplant);
    
    --rc-cardBackground: var(--vc-chrome);
    --rc-onCardBackground: var(--vc-raven);
    
    --rc-cardBackground--highlight: var(--vg-lovepotion);
    --rc-onCardBackground--highlight: var(--vc-snow);

    --rc-cardBackground--inverted: var(--vc-eggplant);
    --rc-onCardBackground--inverted: var(--vc-snow);
    
    --rc-buttonBackground: var(--vg-lovepotion--repeating);
    --rc-onButtonBackground: var(--vc-snow);

    --rc-buttonBackground--inverted: var(--vc-snow);
    --rc-onButtonBackground--inverted: var(--vc-eggplant);
    
    --rc-link: var(--vc-mika);
    --rc-line: var(--vc-chrome);
    --rc-line-dark: var(--vc-raven);

    --rc-backdrop: var(--fade);
    --rc-backdrop-contrast: var(--vc-snow);

    --rc-toast-border: var(--vc-light-grey);
    --rc-toast-background--error: var(--vc-brand-pink--light);
    
    /**	vs: value size (to use in other vairables) */
    --vs-electron: 1px;
    
    --vs-mouse: 1rem;
    --vs-rabbit: 1.2rem;
    --vs-cat: 1.4rem;
    --vs-fox: 1.6rem;
    --vs-dog: 1.8rem;
    --vs-wolf: 2rem;
    --vs-tiger: 3.6rem;
    --vs-lion: 4.4rem;
    --vs-horse: 5.2rem;
    --vs-water-buffalo: 6.6rem;
    --vs-hippo: 8rem;
    --vs-elephant: 8.2rem;
    --vs-trex: 14.6rem;
    
    /** rst: reference size text (use these in actual CSS) */
    --rst-title--main: var(--vs-water-buffalo);
    --rst-title--section: var(--vs-horse);
    --rst-title--subsection: var(--vs-tiger);
    --rst-body: var(--vs-dog);
    
    --rst-pill: var(--vs-rabbit);
    --rst-button: var(--vs-fox);
    --rst-footer: var(--vs-rabbit);
    --rst-header: var(--vs-fox);
    
    /** rs: reference size */
    --rs-line: var(--vs-electron);
    --rs-line--fat: calc(var(--rs-line) * 2);
    
    --rs-gutter: var(--vs-wolf);
    --rs-gutter--large: calc(var(--rs-gutter) * 1.4);
    --rs-gutter--step: var(--vs-tiger);
    --rs-gutter-body--bezel: var(--vs-horse);

    --rs-inline-layout: var(--vs-trex);
    
    --rs-stack-section: var(--vs-hippo);
    --rs-stack-button: calc(2 * var(--rs-gutter));

    --rs-border-radius: var(--vs-wolf);
    --rs-border-radius--small: var(--vs-fox);

    --rs-spinner-size: var(--vs-wolf);
    
    /** helper vars */
    --percent-10px: 62.5%;
    --design-max-width: 147rem;
  }

  @media screen and (max-width: 1024px){
    :root {
      --rs-inline-layout: var(--rs-gutter--large);
      --rst-title--main: var(--vs-hippo);
    }
  }

  @media screen and (max-width: 640px){
    :root {
      --rs-inline-layout: var(--rs-gutter);

      --vs-electron: 1px;

      /** rst: reference size text (use these in actual CSS) */
      --rst-title--main: var(--vs-lion);
      --rst-title--section: var(--vs-wolf);
      --rst-title--subsection: var(--vs-wolf);
      --rst-body: var(--vs-cat);
      
      --rst-pill: var(--vs-rabbit);
      --rst-button: var(--vs-fox);
      --rst-footer: var(--vs-rabbit);
      --rst-header: var(--vs-fox);
    }
  }

  html {
    font-family: "Circular", system-ui, sans-serif;
    
    background-color: var(--rc-background);
    color: var(--rc-onBackground);
    font-size: var(--percent-10px);
    font-weight: 350;
    letter-spacing: -0.005em;
  }

  body {
    font-size: var(--rst-body);
    line-height: 1.4;
    padding: var(--rs-gutter);
    padding-bottom: 0;
    margin: 0;
    scrollbar-gutter: stable;
    box-sizing: border-box;
  }

  body.body--success {
    min-height: 100vh;
    display: flex;

    padding-bottom: var(--rs-gutter);
  }

  a {
    color: inherit;
    text-decoration: none;
  }

  img {
    max-width: 100%;
    height: auto;
  }

  .body--success .slot-wrapper, .body--success main {
    display: flex;
    width: 100%;
  }

  @media screen and (max-width: 640px){
    body {
      padding: var(--vs-mouse);
      padding-bottom: 0;
    }

    body.body--success {
      padding-bottom: var(--vs-mouse);
    }
  }

  .title {
    font-size: var(--rst-title--section);
    font-weight: 600;
    margin-bottom: .5em;
    margin-top: 0;
    line-height: 1;
  }

  .title--main {
    font-size: var(--rst-title--main);
    position: relative;
    margin-top: 0.3em;

    display: inline-flex;
    flex-direction: column;
  }

  .title--main span {
    z-index: 2;
  }

  .lead-text {
    margin-top: 0;
  }

  .title--success {
    font-size: var(--rst-title--section));
    position: relative;
    margin-top: 0.3em;
    width: max-content;
    margin: 0 auto 1em;
  }

  .title--sub {
    display: flex;
    flex-direction: column;
  }

  .title--sub span {
    line-height: 1.2;
  }

  @media screen and (max-width: 640px){
    .title--main {
      margin-bottom: 1em;
    }

    .title--sub {
      display: block;
    }
  }
 
  .title--main::before,
  .title--success::before {
    position: absolute;
    top: 100%;
    left: 0;
    content: '';
    display: block;
    width: 100%;
    aspect-ratio: 7;
    background: url(/deco-line.webp);
    background-size: contain;
    margin-top: var(--rs-gutter);
    transform: translateY(-50%);
    z-index: 1;
  }
  .title--section {
    font-size: var(--rst-title--section);
    max-width: 20ch;
    line-height: 1.1;    
    margin-bottom: var(--rs-gutter);
  }

  .button {
    position: relative;
    display: block;
    background: var(--rc-buttonBackground);
    background-size: 200% 100%;
    color: var(--rc-onButtonBackground);
    border-radius: var(--rs-border-radius--small);
    border: 0;
    font-size: var(--rst-button);
    box-shadow: inset 0 0 0 var(--rs-line--fat) rgba(255 255 255 / .5);
    padding: var(--rs-gutter) calc(var(--rs-gutter) + var(--rs-gutter--large) + 4rem) var(--rs-gutter) var(--rs-gutter--large);
    font-weight: 600;
    width: max-content;
    transition: box-shadow .3s ease;
    margin-top: var(--rs-stack-button);
    cursor: pointer;
  }

  .button::after {
    position: absolute;
    content: '';
    display: block;
    width: 4rem;
    height: 2rem;
    background: url('/ii-symbol.webp') no-repeat;
    background-size: contain;
    right: var(--rs-gutter--large);
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
  }

  .button--oc {
    margin: 0;
  }

  .button--oc::after {
    background-image: url('/ic-logo.webp');
    width: 3rem;
    height: 3rem;
  }

  .button:hover {
    animation: gradient 1.5s ease-in;
    box-shadow: inset 0 0 0 calc(var(--rs-line--fat) * 2) rgba(255 255 255 / .2);
  }

  .button--outline {
    margin-top: 0;
    border-radius: 999px;
    padding: var(--rs-line--fat);
  }

  .button--outline::after {
    display: none;
  }

  .button--outline .button__label {
    display: block;
    border-radius: 999px;
    padding: calc(var(--rs-gutter) * .5) var(--rs-gutter);
    background: var(--rc-navbar);
    pointer-events: none;
  }

  .button--inverted {
    background: var(--rc-buttonBackground--inverted);
    color: var(--rc-onButtonBackground--inverted);
  }

  @media screen and (max-width: 1024px){
    .button {
      width: auto;
    }
  }

  .hidden {
    display: none;
  }

  .link {
    text-decoration: underline;
  }

  .link:hover {
    text-decoration: none;
  }

  @keyframes gradient {
    0% {
      background-position: 0 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .design-width {
    max-width: var(--design-max-width);
    margin: 0 auto;
  }

  .design-width--tight { 
    max-width: calc(var(--design-max-width) * .35);
  }

  .header,
  .footer {
    background: var(--rc-navbar);
    color: var(--rc-onNavbar);
    font-size: var(--rst-header);

    border-radius: var(--rs-border-radius);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;

    display: flex;
    justify-content: space-between;
    align-items: center;

    padding: var(--rs-gutter) var(--rs-inline-layout);
  }

  .footer {
    font-size: var(--rst-footer);
    background: var(--rc-footer);
    color: var(--rc-onFooter);

    margin-top: var(--rs-gutter);
    padding: var(--rs-gutter) var(--rs-inline-layout);
  }

  .footer__copyright {
    display: flex;
    gap: var(--rs-gutter);
    align-items: center;
  }

  .header__links {
    display: flex;
    gap: var(--rs-gutter);
    align-items: center;
  }

  .header__link {
    display: flex;
    align-items: center;
  }

  @media screen and (max-width: 1024px){

    .header {
      padding: var(--rs-gutter) calc(var(--rs-gutter) * 0.5);
      justify-content: center;
    }
    .header__links {
      display: none;
    }
    .footer {
      flex-direction: column;
      gap: var(--rs-gutter);
      align-items: center;
    }
    
  }

  .section {
    margin-top: var(--rs-stack-section);
  }

  .section__header {
    padding-left: var(--rs-inline-layout);
  }

  .section__intro {
    margin-top: var(--rs-gutter);
    max-width: 50ch;
  }

  .section--howto {
    padding-left: var(--rs-inline-layout);
  }

  .logo {
    width: max(50%, 30rem);
    margin-bottom: var(--rs-gutter-body--bezel);
  }

  .logos {
    display: flex;
    align-items: stretch;
    gap: var(--rs-gutter);
  }
  .logos__logo {
    width: 15.3rem;
    display: flex;
    align-items: center;
  }

  @media screen and (max-width: 640px){

    .logos {
      justify-content: space-around;
    }
    .logos__logo {
      width: 12rem;
    }
  }

  .logos__divider {
    width: var(--rs-line);
    background: var(--rc-line);
    opacity: 0.2;
  }

  .pill {
    background: var(--rc-pillBackground);
    color: var(--rc-onPillBackground);
    border-radius: var(--rs-border-radius);
    padding: calc(var(--rs-gutter) * .3) calc(var(--rs-gutter) * .4);
    margin-bottom: var(--rs-gutter);
    display: block;
    font-size: var(--rst-pill);
    text-transform: uppercase;
    width: max-content;
  }

  .steps {
    counter-reset: section;
    margin-top: var(--rs-stack-section);
    padding: 0;
    list-style: none;
    border-left: var(--rs-line) solid var(--rc-line);
  }

  .steps__step {
    position: relative;
    counter-increment: section;
    display: flex;
    gap: var(--rs-gutter);
    align-items: flex-start;
    padding-left: var(--rs-gutter--step);
    padding-top: var(--rs-gutter--step);
    padding-bottom: var(--rs-gutter--step);
  }

  .steps__step:last-child {
    padding-bottom: 0;
  }

  .steps__step::before {
    display: block;
    content: "0" counter(section);
    width: 4rem;
    height: 4rem;
    flex: 0 0 4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 100%;
    box-shadow: inset 0 0 0 var(--rs-line) var(--rc-cardBackground);
    font-weight: 600;
    font-size: var(--rst-pill);
  }

  .steps__step + .steps__step::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: var(--rs-line);
    background: var(--rc-line);
    width: calc(var(--rs-gutter--step) * 1.5);
  }
  .steps__title {
    margin-bottom: var(--rs-gutter);
    margin-top: 0;
    flex: 0 0 35%;
  }

  .steps__body {
    position: relative;
    padding: var(--rs-gutter-body--bezel) var(--rs-gutter--step);
    background: var(--rc-cardBackground);
    margin: 0;
    border-radius: var(--rs-border-radius);
    border-top-left-radius: 0;
  }

  .steps__body::before {
    content: '';
    position: absolute;
    top: 0;
    /* So that it overlaps a little with the steps__body */
    left: 1px;
    width: var(--rs-border-radius);
    height: var(--rs-border-radius);
    background: var(--rc-cardBackground);
    transform: translateX(-100%);
    clip-path: polygon(0 0, 100% 0, 100% 100%);
  }

  @media screen and (max-width: 640px){
    .steps {
      border-left: none;
    }
    .steps__step {
      padding-left: 0;
      flex-wrap: wrap;
    }

    .steps__body::before {
      clip-path: polygon(0 0, 100% 100%, 0 100%);
      transform: translateY(-100%);
    }
    
  }

  .card {
    background: var(--rc-cardBackground);
    color: var(--rc-onCardBackground);
    border-radius: var(--rs-border-radius);
    padding: var(--rs-gutter) 20%;
    text-align: center;
  }
  
  .card.card--intro {
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  .body--success .card {
    border-top-left-radius: var(--rs-border-radius);
    border-top-right-radius: var(--rs-border-radius);
  }

  .card--highlighted {
    background: var(--rc-cardBackground--highlight);
    color: var(--rc-onCardBackground--highlight);
  }

  .card--intro {
    background: var(--rc-cardBackground--inverted);
    color: var(--rc-onCardBackground--inverted);
    padding: calc(var(--rs-gutter) * 2) var(--rs-inline-layout) calc(var(--rs-gutter) * 2);
    margin-bottom: var(--rs-gutter);
    text-align: left;

    display: grid;
    grid-template-columns: 3fr 2fr;
    gap: calc(4 * var(--rs-gutter));
  }

  .card--split {
    display: flex;
    width: 100%;
    box-sizing: border-box;
    margin: 0;
    background: var(--rc-cardBackground--inverted);
    color: var(--rc-onCardBackground--inverted);
    text-align: center;
    padding: 0;
  }

  .card__message {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: var(--rs-gutter);
    box-sizing: border-box;
    flex: 3;
  }

  @media screen and (max-width: 1500px){
    .card__message {
      flex: 2;
    }
  }
  
  .card__main__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
  }

  .card__cta {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex: 2;
    
    /* To align contents of card__cta and card__message we add an extra margin here */
    /* 41px represent the header on top */
    padding-top: calc(var(--rs-gutter) + 41px);
    
    background: var(--rc-cardBackground--highlight);
    color: var(--rc-onCardBackground--highlight);
    text-align: left;
    border-radius: var(--rs-border-radius);
    box-sizing: border-box;
  }
  
  .card__cta__content {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: start;
    padding: 0 10%;
  }

  .card--split .card__image {
    width: 50%;
    height: auto;
    transform: translate(0);
    align-self: center;
  }

  .credential-card {
    background: var(--vc-mika-transparent);
    border-radius: var(--rs-border-radius);
    border: 1px solid var(--vc-snow);
    padding: calc(var(--rs-gutter) * 1.5);

    display: flex;
    flex-direction: column;
    gap: var(--rs-gutter);
  }

  .credential-card__label {
    margin: 0;
    font-weight: 300;
  }

  .credential-card__title {
    margin: 0;
    font-size: var(--rst-title--subsection);
  }

  @media screen and (max-width: 1024px){
    .card__cta {
      padding: calc(var(--rs-gutter) * 4) 5%;
      flex: 2;
    }

    .card__cta__content {
      /* Padding already applied in parent */
      padding: 0;
    }
  }

  @media screen and (max-width: 640px){
    .card--split {
      flex-direction: column;
    }
    .card__cta {
      padding: calc(var(--rs-gutter) * 2) 10%;
    }
  }

  .card__text {
    flex: 0 0 50%;
  }

  .innovation-cards {
    display: grid;
    grid-template-columns: calc(55% - var(--rs-gutter)) 45%;
    gap: var(--rs-gutter);
    margin-top: var(--rs-stack-section);
  }
  .card__image {
    height: auto;
  }

  .card.card--innovation {
    padding-top: var(--rs-gutter--large);
  }

  @media screen and (max-width: 1300px) {
    .card--intro {
      gap: calc(2 * var(--rs-gutter));
    }
  }

  @media screen and (max-width: 1024px){
    .innovation-cards {
      grid-template-columns: 1fr;
    }
    .card--intro {
      display: flex;
      flex-direction: column-reverse;
      gap: var(--rs-gutter);
      overflow: clip;
    }
    .card__image {
      width: 40%;
      align-self: flex-end;
    }
  }

  @media screen and (max-width: 640ox){
    .card__image {
      width: 60%;
      align-self: flex-end;
      transform: translateX(20%);
    }
  }

  @use "../styles/mixins/display";

  .busy {
    display: flex;

    z-index: 1000;

    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;

    background: var(--rc-backdrop);
    color: var(--rc-backdrop-contrast);
  }

  .busy.hide {
    display: none;
  }

  .content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    flex-grow: 1;
  }

  /* Reference spinner: https://console.juno.build/ */
  .spinner-wrapper {
    position: relative;
    height: 30px;
    margin: 1.45rem;
  }

  @keyframes spinner-rotate {
    0% {
      transform: perspective(120px) rotateX(0) rotateY(0);
    }
    50% {
      transform: perspective(120px) rotateX(-180.1deg) rotateY(0);
    }
    100% {
      transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
    }
  }

  .spinner {
    border-color: var(--rc-backdrop-contrast);
    position: absolute;
    top: calc(50% - var(--rs-spinner-size) / 2);
    left: calc(50% - var(--rs-spinner-size) / 2);

    display: block;
    background: transparent;
    border: 3px solid var(--rc-backdrop-contrast);
    width: var(--rs-spinner-size);
    height: var(--rs-spinner-size);
    border-radius: 3px;
    animation: spinner-rotate 1.2s infinite linear;
  }

  /* Reference: Internet Identity Toasts */
  .c-toasts {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: var(--z-toasts);
    margin: 0 auto calc(var(--rs-footer-height) + 0.5rem);
  }

  .l-container {
    font-size: 1.6rem;
    min-width: 40rem;
    max-width: 40rem;
    /* centers the container and adds a bit of space to make sure the footer does not stick to it */
    margin: 0 auto 2rem;
  }

  @media (max-width: 512px) {
    .l-container {
      width: 100%;

      max-width: none;
      /* centers the container and adds a bit of space to make sure the footer does not stick to it */
      margin: 0 0 var(--rs-footer-height);
    }
  }
</style>
