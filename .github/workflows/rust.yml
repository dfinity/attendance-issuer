name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [ 1.76.0 ]

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install dfx
      uses: dfinity/setup-dfx@main

    - name: Install ic-wasm
      run: cargo install ic-wasm --version 0.3.5

    - name: Install Rust
      run: |
        rustup update ${{ matrix.rust }} --no-self-update
        rustup default ${{ matrix.rust }}
        rustup component add rustfmt
        rustup component add clippy

    - name: Check Format
      run: cargo fmt --all -- --check

      # fails if lockfile is out of date
      # https://users.rust-lang.org/t/check-if-the-cargo-lock-is-up-to-date-without-building-anything/91048/5
    - name: Cargo Lockfile Check
      run: cargo update --workspace --locked

    - name: Install ic-test-machine
      run: |
        curl -sLO https://download.dfinity.systems/ic/08b0e064eef80a4dc8aa523c02852a29ec968604/binaries/x86_64-linux/ic-test-state-machine.gz
        gzip -d ic-test-state-machine.gz
        chmod +x ic-test-state-machine

    - name: Start local replica
      # We need to start the replica to create canisters.
      run: dfx start --background
    - name: Create canistres
      # We need the canisters to be able to build the wasm.
      run: |
        dfx canister create internet_identity
        dfx canister create early_adopter
        dfx canister create internet_identity

    - name: Download Internet Identity
      run: dfx build internet_identity

    - name: Build canister
      run: ./build.sh

    - name: Test
      run: |
        export STATE_MACHINE_BINARY="$(pwd)/ic-test-state-machine"
        export II_WASM="$(pwd)/internet_identity_dev.wasm.gz"
        cargo test
    
    - name: Stop local replica
      run: dfx stop
    

